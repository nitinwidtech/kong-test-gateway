name: Deploy to Azure & Kubernetes

on:
  push:
    branches:
      - main  # Runs workflow when changes are pushed to main
  workflow_dispatch: # Allows manual trigger

jobs:
  terraform:
    name: "Terraform Apply"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Terraform Init
        run: terraform init -upgrade

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  kubernetes:
    name: "Deploy Kubernetes Resources"
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup kubectl
        run: |
          az aks get-credentials --resource-group kong-ai-gateway --name kong-aks

      - name: Get AOAI Credentials and Create Secret
        run: |
          AOAI_ENDPOINT=$(az cognitiveservices account show -n kong-aoai-test6 -g kong-ai-gateway --query 'properties.endpoint' -o tsv)
          AOAI_KEY=$(az cognitiveservices account keys list -n kong-aoai-test6 -g kong-ai-gateway --query 'key1' -o tsv)

          kubectl create secret generic aoai --from-literal=OPENAI_API_KEY=$AOAI_KEY --from-literal=OPENAI_ENDPOINT=https://openai-internal-service || true

      - name: Ensure TLS Certificates Exist
        run: |
          if [[ ! -f ./tls.crt || ! -f ./tls.key ]]; then
            echo "TLS certificate files not found! Generating self-signed certificate..."
            openssl req -x509 -newkey rsa:4096 -keyout tls.key -out tls.crt -days 365 -nodes -subj "/CN=kong-ai-gateway"
          fi

      - name: Deploy Kong
        run: |
          kubectl create namespace kong || true
          helm repo add kong https://charts.konghq.com
          helm repo update
          
          kubectl create secret tls konnect-client-tls -n kong \
            --cert=./tls.crt --key=./tls.key

          echo "Installing Kong..."
          helm upgrade --install kong kong/ingress -n kong --values k8s/values.yaml \
            --set env.plugins="bundled,openid-connect" --wait

          echo "Checking if openid-connect plugin is enabled..."
          kubectl get pods -n kong
          kubectl exec -n kong -it $(kubectl get pods -n kong -l app.kubernetes.io/name=kong -o jsonpath='{.items[0].metadata.name}') -- kong config db_export | grep openid-connect || echo "OIDC plugin not enabled!"

      - name: Debug Kong Installation
        run: |
          echo "Checking Kong resources..."
          kubectl get all -n kong
          echo "Describing Kong services..."
          kubectl describe svc -n kong kong-gateway-proxy || echo "kong-gateway-proxy service not found!"
          echo "Fetching Kong logs..."
          kubectl logs -n kong -l app.kubernetes.io/name=kong --tail=50 || echo "No logs found!"

      - name: Wait for Kong External IP
        run: |
          echo "Waiting for Kong external IP..."
          while [[ -z $(kubectl get svc -n kong --ignore-not-found -o jsonpath='{.items[?(@.metadata.name=="kong-gateway-proxy")].status.loadBalancer.ingress[0].ip}') ]]; do
            echo "Waiting for external IP..."
            sleep 30
          done

          KONG_EXTERNAL_IP=$(kubectl get svc -n kong -o jsonpath='{.items[?(@.metadata.name=="kong-gateway-proxy")].status.loadBalancer.ingress[0].ip}')
          echo "Kong External IP: $KONG_EXTERNAL_IP"

          # Update kong-plugin-oidc-test.yaml with correct External IP
          sed -i "s|https://<KONG EXTERNAL IP>.nip.io/|https://$KONG_EXTERNAL_IP.nip.io/|g" k8s/kong-plugin-oidc-test.yaml

          # Update ingress-web.yaml with correct External IP
          sed -i "s|<KONG EXTERNAL IP>.nip.io|$KONG_EXTERNAL_IP.nip.io|g" k8s/ingress-web.yaml

      - name: Deploy Cert Manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.4/cert-manager.yaml

      - name: Apply Kubernetes Resources
        run: |
          kubectl apply -f k8s/kong-plugin-oidc-test.yaml
          kubectl apply -f k8s/ingress-web.yaml
          kubectl apply -f k8s/kong-plugin-rate-limit.yaml
          kubectl apply -f k8s/ingress-openai.yaml

  TerraformDestroy:
    name: "Terraform Destroy"
    needs: [terraform, kubernetes]
    runs-on: ubuntu-latest
    if: failure()  # Destroy only if Kubernetes deployment fails

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Terraform Init
        run: terraform init -upgrade

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
